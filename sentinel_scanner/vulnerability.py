import requests
import os

class VulnerabilityScanner:
    def __init__(self):
        # Get the API key from the environment variable
        self.api_key = os.getenv('NVD_API_KEY')  # Fetch the secret NVD_API_KEY
        if not self.api_key:
            raise ValueError("API Key not found. Ensure the NVD_API_KEY environment variable is set.")
        self.cve_data_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    
    def check_cve(self, service, version):
        """
        Fetch vulnerabilities for a given service and version.
        """
        if not version or version.lower() == "unknown":
            return None

        try:
            # Construct query based on service and version
            query = f"{service} {version}"

            # Set parameters for the API request
            params = {
                "apiKey": self.api_key,
                "keyword": query,
                "resultsPerPage": 5,  # Limit results to 5 (optional)
                "startIndex": 0
            }

            # Send request to NVD API
            response = requests.get(self.cve_data_url, params=params, timeout=10)
            if response.status_code == 200:
                results = response.json()

                # Extract CVE details
                cves = [
                    f"CVE ID: {item['cve']['CVE_data_meta']['ID']}\nDescription: {item['cve']['description']['description_data'][0]['value']}\n"
                    for item in results.get("result", {}).get("CVE_Items", [])
                ]
                
                # Return vulnerabilities or a message if no results are found
                return cves if cves else "No known vulnerabilities for this service version"
            else:
                print(f"Error fetching CVEs: {response.status_code}")
                return None
        except Exception as e:
            print(f"Error in CVE lookup: {e}")
            return None
